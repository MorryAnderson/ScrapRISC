module M3_incr_32 (
    input I_ena,
    input I_in[32],
    output O_out[32]
);


gate and_01 = and(I_ena, I_in[0]);
gate and_02 = and(I_ena, I_in[1:0]);
gate and_03 = and(I_ena, I_in[2:0]);
gate and_04 = and(I_ena, I_in[3:0]);
gate and_05 = and(I_ena, I_in[4:0]);
gate and_06 = and(I_ena, I_in[5:0]);
gate and_07 = and(I_ena, I_in[6:0]);
gate and_08 = and(I_ena, I_in[7:0]);
gate and_09 = and(I_ena, I_in[8:0]);
gate and_10 = and(I_ena, I_in[9:0]);
gate and_11 = and(I_ena, I_in[10:0]);
gate and_12 = and(I_ena, I_in[11:0]);
gate and_13 = and(I_ena, I_in[12:0]);
gate and_14 = and(I_ena, I_in[13:0]);
gate and_15 = and(I_ena, I_in[14:0]);
gate and_16 = and(I_ena, I_in[15:0]);
gate and_17 = and(I_ena, I_in[16:0]);
gate and_18 = and(I_ena, I_in[17:0]);
gate and_19 = and(I_ena, I_in[18:0]);
gate and_20 = and(I_ena, I_in[19:0]);
gate and_21 = and(I_ena, I_in[20:0]);
gate and_22 = and(I_ena, I_in[21:0]);
gate and_23 = and(I_ena, I_in[22:0]);
gate and_24 = and(I_ena, I_in[23:0]);
gate and_25 = and(I_ena, I_in[24:0]);
gate and_26 = and(I_ena, I_in[25:0]);
gate and_27 = and(I_ena, I_in[26:0]);
gate and_28 = and(I_ena, I_in[27:0]);
gate and_29 = and(I_ena, I_in[28:0]);
gate and_30 = and(I_ena, I_in[29:0]);
gate and_31 = and(I_ena, I_in[30:0]);


gate xor_00 = xor(I_in[0], I_ena);
gate xor_01 = xor(I_in[1], and_01);
gate xor_02 = xor(I_in[2], and_02);
gate xor_03 = xor(I_in[3], and_03);
gate xor_04 = xor(I_in[4], and_04);
gate xor_05 = xor(I_in[5], and_05);
gate xor_06 = xor(I_in[6], and_06);
gate xor_07 = xor(I_in[7], and_07);
gate xor_08 = xor(I_in[8], and_08);
gate xor_09 = xor(I_in[9], and_09);
gate xor_10 = xor(I_in[10], and_10);
gate xor_11 = xor(I_in[11], and_11);
gate xor_12 = xor(I_in[12], and_12);
gate xor_13 = xor(I_in[13], and_13);
gate xor_14 = xor(I_in[14], and_14);
gate xor_15 = xor(I_in[15], and_15);
gate xor_16 = xor(I_in[16], and_16);
gate xor_17 = xor(I_in[17], and_17);
gate xor_18 = xor(I_in[18], and_18);
gate xor_19 = xor(I_in[19], and_19);
gate xor_20 = xor(I_in[20], and_20);
gate xor_21 = xor(I_in[21], and_21);
gate xor_22 = xor(I_in[22], and_22);
gate xor_23 = xor(I_in[23], and_23);
gate xor_24 = xor(I_in[24], and_24);
gate xor_25 = xor(I_in[25], and_25);
gate xor_26 = xor(I_in[26], and_26);
gate xor_27 = xor(I_in[27], and_27);
gate xor_28 = xor(I_in[28], and_28);
gate xor_29 = xor(I_in[29], and_29);
gate xor_30 = xor(I_in[30], and_30);
gate xor_31 = xor(I_in[31], and_31);

assign O_out = {xor_31,xor_30,xor_29,xor_28,xor_27,xor_26,xor_25,xor_24,xor_23,xor_22,xor_21,xor_20,xor_19,xor_18,xor_17,xor_16,xor_15,xor_14,xor_13,xor_12,xor_11,xor_10,xor_09,xor_08,xor_07,xor_06,xor_05,xor_04,xor_03,xor_02,xor_01,xor_00};


place and_01 @(0,0,0);
place and_02 @(0,0,1);
place and_03 @(0,0,2);
place and_04 @(0,0,3);
place and_05 @(0,0,4);
place and_06 @(0,0,5);
place and_07 @(0,0,6);
place and_08 @(0,0,7);
place and_09 @(0,0,8);
place and_10 @(0,0,9);
place and_11 @(0,0,10);
place and_12 @(0,0,11);
place and_13 @(0,0,12);
place and_14 @(0,0,13);
place and_15 @(0,0,14);
place and_16 @(0,0,15);
place and_17 @(0,0,16);
place and_18 @(0,0,17);
place and_19 @(0,0,18);
place and_20 @(0,0,19);
place and_21 @(0,0,20);
place and_22 @(0,0,21);
place and_23 @(0,0,22);
place and_24 @(0,0,23);
place and_25 @(0,0,24);
place and_26 @(0,0,25);
place and_27 @(0,0,26);
place and_28 @(0,0,27);
place and_29 @(0,0,28);
place and_30 @(0,0,29);
place and_31 @(0,0,30);

place xor_00 @(1,0,0);
place xor_01 @(1,0,1);
place xor_02 @(1,0,2);
place xor_03 @(1,0,3);
place xor_04 @(1,0,4);
place xor_05 @(1,0,5);
place xor_06 @(1,0,6);
place xor_07 @(1,0,7);
place xor_08 @(1,0,8);
place xor_09 @(1,0,9);
place xor_10 @(1,0,10);
place xor_11 @(1,0,11);
place xor_12 @(1,0,12);
place xor_13 @(1,0,13);
place xor_14 @(1,0,14);
place xor_15 @(1,0,15);
place xor_16 @(1,0,16);
place xor_17 @(1,0,17);
place xor_18 @(1,0,18);
place xor_19 @(1,0,19);
place xor_20 @(1,0,20);
place xor_21 @(1,0,21);
place xor_22 @(1,0,22);
place xor_23 @(1,0,23);
place xor_24 @(1,0,24);
place xor_25 @(1,0,25);
place xor_26 @(1,0,26);
place xor_27 @(1,0,27);
place xor_28 @(1,0,28);
place xor_29 @(1,0,29);
place xor_30 @(1,0,30);
place xor_31 @(1,0,31);


endmodule
