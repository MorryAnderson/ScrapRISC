module M3_dealign (
    input I_in_dat[32],
    input I_adr_lsb[2],
    input I_mask[2],
    input I_ext,
    output O_out_dat[32]
);


wire shf[2];
assign shf = {I_adr_lsb};

wire byte_0[8];
wire byte_1[8];
wire byte_2[8];
wire byte_3[8];

assign byte_3 = {I_in_dat[31:24]};
assign byte_2 = {I_in_dat[23:16]};
assign byte_1 = {I_in_dat[15:8]};
assign byte_0 = {I_in_dat[7:0]};

wire dat_0[8];
wire dat_1[8];
wire dat_2[8];
wire dat_3[8];

wire shf_dat[32];


sub M3_mux4_8 (
    .I_sel <= shf,
    .I_d0  <= byte_3,
    .I_d1  <= byte_1,
    .I_d2  <= byte_3,
    .I_d3  <= byte_3,
    .O_q   => dat_3
);
place M3_mux4_8 @(0,0,24);

sub M3_mux4_8 (
    .I_sel <= shf,
    .I_d0  <= byte_2,
    .I_d1  <= byte_1,
    .I_d2  <= byte_2,
    .I_d3  <= byte_3,
    .O_q   => dat_2
);
place M3_mux4_8 @(0,0,16);

sub M3_mux4_8 (
    .I_sel <= shf,
    .I_d0  <= byte_1,
    .I_d1  <= byte_1,
    .I_d2  <= byte_3,
    .I_d3  <= byte_3,
    .O_q   => dat_1
);
place M3_mux4_8 @(0,0,8);

sub M3_mux4_8 (
    .I_sel <= shf,
    .I_d0  <= byte_0,
    .I_d1  <= byte_1,
    .I_d2  <= byte_2,
    .I_d3  <= byte_3,
    .O_q   => dat_0
);
place M3_mux4_8 @(0,0,0);


assign shf_dat = {dat_3, dat_2, dat_1, dat_0};

wire mask[4];
wire mask32[32];

assign mask = {I_mask[1],I_mask[1],I_mask[0],VCC};
assign mask32 = { {8{mask[3]}}, {8{mask[2]}}, {8{mask[1]}}, {8{mask[0]}}};
gate mask_n = not(mask32);


gate msk0_n = not(I_mask[0]);
gate msk1_n = not(I_mask[1]);
gate loading_byte = and(msk0_n,msk1_n);
wire sign;

wire shf_dat_15;
wire shf_dat_7;

assign shf_dat_15 = {shf_dat[15]};
assign shf_dat_7  = {shf_dat[7]};


sub M3_mux2 (
    .I_sel <= loading_byte,
    .I_d0 <= shf_dat_15,
    .I_d1 <= shf_dat_7,
    .O_q => sign
);
place M3_mux2 @(1,0,1);

gate dat_and_0 = and(shf_dat, mask32);
gate dat_and_1 = and(mask_n, sign, I_ext);
gate out_dat = or(dat_and_0,dat_and_1);
assign O_out_dat = {out_dat};


place mask_n       @(7,0,0);
place dat_and_0    @(8,0,0);
place dat_and_1    @(9,0,0);
place out_dat      @(10,0,0);

place msk0_n       @(1,0,5);
place msk1_n       @(1,0,6);
place loading_byte @(1,0,7);

place GND          @(0,0,1);
place VCC          @(0,0,2);


endmodule
